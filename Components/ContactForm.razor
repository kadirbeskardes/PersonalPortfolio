@using Personal.Models

<EditForm Model="@contactModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Adınız</label>
        <InputText @bind-Value="contactModel.Name" id="name" class="form-control" />
        <ValidationMessage For="@(() => contactModel.Name)" />
    </div>

    <div class="form-group">
        <label for="email">E-posta</label>
        <InputText @bind-Value="contactModel.Email" id="email" class="form-control" />
        <ValidationMessage For="@(() => contactModel.Email)" />
    </div>

    <div class="form-group">
        <label for="subject">Konu</label>
        <InputText @bind-Value="contactModel.Subject" id="subject" class="form-control" />
        <ValidationMessage For="@(() => contactModel.Subject)" />
    </div>

    <div class="form-group">
        <label for="message">Mesajınız</label>
        <InputTextArea @bind-Value="contactModel.Message" id="message" class="form-control" rows="5"></InputTextArea>
        <ValidationMessage For="@(() => contactModel.Message)" />
    </div>

    <button type="submit" class="btn btn-primary">Gönder</button>
</EditForm>

@if (isSubmitted)
{
    <div class="alert alert-success mt-3">
        Mesajınız başarıyla gönderildi. Teşekkür ederiz!
    </div>
}

@code {
    private ContactModel contactModel = new ContactModel();
    private bool isSubmitted = false;

    private async Task HandleValidSubmit()
    {
        // Burada form verilerini bir API'ye gönderebilir veya e-posta olarak iletebilirsiniz
        // Örnek:
        // await httpClient.PostAsJsonAsync("api/contact", contactModel);

        // Şimdilik sadece bir başarı mesajı gösteriyoruz
        isSubmitted = true;
        contactModel = new ContactModel();

        // 3 saniye sonra mesajı gizle
        await Task.Delay(3000);
        isSubmitted = false;
    }
}